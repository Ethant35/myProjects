# -*- coding: utf-8 -*-
"""HW1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hd9JduSOkoSxGTDIll687irpfXJnewLN
"""

import warnings
warnings.filterwarnings('ignore')

# data and plotting
import pandas as pd
import numpy as np
from plotnine import *

# preprocessing
from sklearn.preprocessing import StandardScaler #Z-score variables
from sklearn.model_selection import train_test_split
# metrics
from sklearn.metrics import accuracy_score, confusion_matrix, mean_squared_error, ConfusionMatrixDisplay, roc_auc_score, recall_score, precision_score

# models
from sklearn.pipeline import Pipeline
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier

from sklearn.pipeline import make_pipeline
from sklearn.compose import make_column_transformer
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV

data=pd.read_csv("https://raw.githubusercontent.com/cmparlettpelleriti/CPSC393ParlettPelleriti/main/Data/hw1.csv")
data.head()

ggplot(data, aes(x = 'X1', y = 'X2', color = 'Group'))+geom_point()+theme_minimal()+ggtitle("Scatterplot comparing group of X1 and X2")

ggplot(data, aes(x = 'X2', y = 'X3', color = 'Group'))+geom_point()+theme_minimal()+ggtitle("Scatterplot comparing group of X1 and X4")

# organize and split data
predictors=[c for c in data.columns if c != "Group"]
X=data[predictors]
y=data['Group']
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=.2)

# build parts of pipeline
z=make_column_transformer((StandardScaler(),predictors),remainder='passthrough')
# build pipeline
svm=SVC(probability=True)
pipe=Pipeline([('pre',z),('model',svm)])
# parameters dict
params={'model__C':[0.001, 0.01, 1, 5, 25, 50],'model__gamma':[0.001,0.01, 0.1, 0.5, 1,2,5],'model__kernel':["linear",'rbf']}
# grid search
grid=GridSearchCV(pipe,params,scoring='accuracy',cv=5,refit=True)
# fit and check
grid.fit(X_train,y_train)
grid.best_estimator_.get_params()

#Results of gridsearch
svm=SVC(C=50,gamma=.01,probability=True,kernel='rbf')
pipe=Pipeline([('pre',z),('model',svm)])
pipe.fit(X_train,y_train)

print("Train Acc: ", accuracy_score(y_train, pipe.predict(X_train)))
print("Test Acc: ", accuracy_score(y_test, pipe.predict(X_test)))

print("Train ROC/AUC: ", roc_auc_score(y_train, pipe.predict_proba(X_train)[:,1]))
print("Test ROC/AUC: ", roc_auc_score(y_test, pipe.predict_proba(X_test)[:,1]))



#Logsistic regression
logistic=LogisticRegression()
pipe=Pipeline([('pre',z),('model',logistic)])
pipe.fit(X_train,y_train)
y_pred_train = pipe.predict(X_train)
y_pred_test = pipe.predict(X_test)

y_pred_train_prob = pipe.predict_proba(X_train)[:,1]
y_pred_test_prob = pipe.predict_proba(X_test)[:,1]

# assess
print("Train Acc: ", accuracy_score(y_train, y_pred_train))
print("Test Acc: ", accuracy_score(y_test, y_pred_test))
print("Train ROC AUC: ", roc_auc_score(y_train, y_pred_train_prob))
print("Test ROC AUC: ", roc_auc_score(y_test, y_pred_test_prob))

ConfusionMatrixDisplay.from_predictions(y_train,y_pred_train)

ConfusionMatrixDisplay.from_predictions(y_test,y_pred_test)

# build pipeline
knn=KNeighborsClassifier()
#Results of gridsearch

pipe=Pipeline([('pre',z),('model',knn)])
# parameters dict
params={'model__n_neighbors': range(2, 30)}
# grid search
grid=GridSearchCV(pipe,params,scoring='accuracy',cv=5,refit=True)
# fit and check
grid.fit(X_train,y_train)
grid.best_estimator_.get_params()

knn=KNeighborsClassifier(n_neighbors=18)
pipe=Pipeline([('pre',z),('model',knn)])
pipe.fit(X_train,y_train)

y_pred_train = pipe.predict(X_train)
y_pred_test = pipe.predict(X_test)

y_pred_train_prob = pipe.predict_proba(X_train)[:,1]
y_pred_test_prob = pipe.predict_proba(X_test)[:,1]

# assess
print("Train Acc: ", accuracy_score(y_train, y_pred_train))
print("Test Acc: ", accuracy_score(y_test, y_pred_test))
print("Train ROC AUC: ", roc_auc_score(y_train, y_pred_train_prob))
print("Test ROC AUC: ", roc_auc_score(y_test, y_pred_test_prob))

ConfusionMatrixDisplay.from_predictions(y_train,y_pred_train)

ConfusionMatrixDisplay.from_predictions(y_test,y_pred_test)